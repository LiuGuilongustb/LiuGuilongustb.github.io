[{"content":"线性空间 首先，我们要明确一个事实:由所有 $m \\times n $ 实矩阵构成的集合$V$，任意$A,B,C \\in V$满足\n加法交换律 加法结合律 存在零矩阵 存在负矩阵 定义 1（加群） 在非空集合 $V$ 上定义一种代数运算，称之为加法（记为“$+$”），使得 $\\forall u,v \\in V$ 都有 $V$ 中唯一元素 $u + v$ 与之对应，该元素称为 $u$ 与 $v$ 的和，且满足如下性质：\n交换律： $ u + v = v + u $ 结合律： $ (u + v) + w = u + (v + w) $ 存在零元 $\\theta \\in V$ 使得 $\\forall u \\in V$，有：$ u + \\theta = u $ 存在负元 $\\forall u \\in V$，存在负元素 $-u$ 使得： $ u + (-u) = \\theta $ 称 $V$ 在加法运算下构成一个加群，记为 $(V, +)$。\n关于上面的定义，我们要明白一个事情，这里的加法不是加法运算，而是任意一种代数运算！这一点非常重要，因为我如果定义这种代数运算为乘法，那么在乘法的代数运算下，依旧能够构成加群。\n例如：\n在数的加法运算下，整数集、有理数集、实数集、复数集分别构成加群，记作 $(\\mathbb{Z}, +)$、$(\\mathbb{Q}, +)$、$(\\mathbb{R}, +)$、$(\\mathbb{C}, +)$。\n在数的乘法运算下，非零有理数集构成加群 $(\\mathbb{Q} \\setminus \\lbrace0\\rbrace, \\cdot)$。同样，$(\\mathbb{R} \\setminus \\lbrace0\\rbrace, \\cdot)$、$(\\mathbb{C} \\setminus \\lbrace0\\rbrace, \\cdot)$ 也构成加群；而 $(\\mathbb{Z} \\setminus \\lbrace0\\rbrace, \\cdot)$ 不构成加群（不满足定义中的第四条，乘法运算下的加群，这里的$\\theta$是1，而对于乘法来说，除了1和-1，没有其他整数，能够满足乘法运算等于1）。\n定义 2（数域） 设 $F$ 是非空数集，若 $F$ 中任意两个数的和、差、积、商（除数不为 $0$）仍在该数集，即对四则运算封闭，称该数集 $F$ 为一个数域。\n注：实数集 $\\mathbb{R}$、复数集 $\\mathbb{C}$、有理数集 $\\mathbb{Q}$ 是数域；而自然数集 $\\mathbb{N}$、整数集 $\\mathbb{Z}$ 不是数域。\n思考：集合 ${\\mathbb{Q}}(i) = { \\left. {a + bi} \\right|a,b \\in \\mathbb{Q}}$ 是数域吗？其中 $i$ 是虚数单位。\n接下来，我们思考另外一个事实：设集合 $V$ 是所有 $m \\times n$ 实矩阵构成的集合, 任选矩阵 $A, B \\in V$, $k, l \\in \\mathbb{R}$ 满足：\n$k(A + B) = kA + kB$ $(k + l)A = kA + lA$ $k(lA) = (kl)A$ $1 \\cdot A = A$ 刚才我们从第一个事实给出了加群的定义，现在我们从第二个事实给出线性空间的定义。\n定义 3（线性空间） 设 $(V, +)$ 是一个加群，$F$ 是一个数域。定义了 $F$ 中的数与 $V$ 中元素的一种代数运算，称为数乘，使得 $\\forall \\lambda \\in F, u \\in V$，有 $V$ 中唯一元素 $\\lambda u$ 与之对应，$\\lambda u$ 称为 $\\lambda$ 与 $u$ 的积，且满足以下性质：\n$\\lambda (u + v) = \\lambda u + \\lambda v$ $(\\lambda + \\mu)u = \\lambda u + \\mu u$ $\\lambda (\\mu u) = (\\lambda \\mu) u$ $1 \\cdot u = u$ 由此，$V$ 称为数域 $F$ 上的线性空间，记为 $(V, +, \\cdot)$。$V$ 中元素称为向量，$F$ 中元素称为标量。\n我们要明确线性空间的前提是他本身要是一个加群，所以他在满足定义3的4条性质之前要满足定义1的4条性质。 注：当 $F = \\mathbb{R}$ 时，称为实线性空间；当 $F = \\mathbb{C}$ 时，称为复线性空间。\n接下来，我们既然提出了线性空间的定义，我们肯定要分析一下他有哪些性质（下面的性质如果你不加以思考的话必定认为这是理所当然的，如果你能思考出原因，这才是性质的根本）。\n简单性质：设 $V$ 是数域 $F$ 上的线性空间，有：\n零向量是唯一的； （证明：假设我们有两个零向量 $\\theta_1$ 和 $\\theta_2$,根据零向量的性质，任何一个向量加上零向量都等于它本身，那么我们就可以得到 $\\theta_1+\\theta_2 = \\theta_1 = \\theta_2 $，所以 $\\theta_1$ 和 $\\theta_2$ 相等，即零向量是唯一的。）\n任一向量的负向量是唯一的；（证明：首先我们定义一个向量u，假设他有两个负向量 $v_1$ 和 $v_2$，先根据零向量的定义 $v_1=v_1 + \\theta$，再根据负向量的定义 $\\theta = u +v_2$，所以 $v_1 = v_1 + \\theta = v_1 + ( u + v_2 ) = (v_1 + u ) + v_2 = \\theta + v_2 = v_2$，即负向量唯一。）\n对任意 $k \\in F$ 和 $\\alpha \\in V$，有 $0 \\alpha = \\theta$，$(-1) \\alpha = -\\alpha$，$k \\theta = \\theta$；（证明1：$0 \\alpha = (0+0)\\alpha = 0 \\alpha + 0 \\alpha$，对于这个式子，左右两边同时加上$0 \\alpha$的负向量，即得 $0 \\alpha = \\theta$。）（证明2：解释原因之前，我们首先要明确 $(-1) \\cdot \\alpha$ 是一个数和一个向量的积，而 $- \\alpha$ 是 $\\alpha$ 的负元素，这是两个概念。$\\alpha + (-1) \\cdot \\alpha = (1-1) \\alpha = \\theta$，根据定义，一个元素加上另一个元素得零元素，那么第二个元素是第一个元素的负元素。） （证明3：$k \\theta = k (\\theta + \\theta) = k \\theta + k \\theta$，还是左右两次同时加$\\theta$的负元素。）\n若 $k \\alpha = \\theta$，则 $k = 0$ 或 $\\alpha = \\theta$。 （证明：假设 $k \\ne 0$，则 $\\alpha = (k \\cdot (\\frac{1}{k}) \\alpha)\\alpha = k \\alpha\\cdot \\frac{1}{k} = \\theta \\cdot \\frac{1}{k} = \\theta$。）\n定义4（几何空间） 在通常向量的加法和数乘运算下构成上的线性空间为 \\begin{equation} \\mathbb{R}^n = \\lbrace x \\mid (x_1, x_2, \\dots, x_n)^T, x_i \\in \\mathbb{R}, i = 1, \\dots, n \\rbrace, \\nonnumber \\end{equation} 称为 n 维实向量空间。类似可定义 $\\mathbb{C}^n$ .\n定义 5（复矩阵空间和实矩阵空间） 由所有 $m \\times n $ 复矩阵构成的集合$V$，即\n\\begin{equation} V = \\lbrace (a_{ij}){m \\times n} \\mid a{ij} \\in \\mathbb{C} \\rbrace \\nonnumber \\end{equation} $V$ 在矩阵的加法与数乘运算下构成 $\\mathbb{C}$ 上的线性空间，称为复矩阵空间，记作 $\\mathbb{C}^{m \\times n}$。类似可定义实矩阵空间 $\\mathbb{R}^{m \\times n}$。\n定义 6 （核空间） 取定 $A \\in \\mathbb{C}^{m \\times n}$，令 $W = \\lbrace x \\in \\mathbb{C}^n \\mid Ax = 0 \\rbrace$，不难验证 $W$ 是 $\\mathbb{C}$ 上的线性空间，称为矩阵 $A$ 的核空间，记作 $\\text{N}(A)$。\n线性子空间 基与坐标 内积空间 直和和投影 多项式插值 ","date":"2025-02-28T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B01%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%BC%95%E8%AE%BA/","title":"矩阵理论系列笔记1：线性代数引论"},{"content":"","date":"2025-02-28T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B02%E7%BA%BF%E6%80%A7%E6%98%A0%E5%B0%84%E4%B8%8E%E7%9F%A9%E9%98%B5/","title":"矩阵理论系列笔记2：线性映射与矩阵"},{"content":"","date":"2025-02-28T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B03%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3/","title":"矩阵理论系列笔记3：矩阵分解"},{"content":"","date":"2025-02-28T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B04/","title":"矩阵理论系列笔记4："},{"content":"","date":"2025-02-28T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B05/","title":"矩阵理论系列笔记5："},{"content":"配置Hugo 1. 安装必要软件 按照以下顺序安装软件（因为相互依赖关系）：\nGit\nPowershell 7.x\nWin11 自带 Powershell 的版本是 5.1，需要更新到 7.x。首先，在 win11 自带 Powershell 里输入以下指令，安装最新稳定版：\n1 winget install --id Microsoft.Powershell --source winget 接下来的命令行操作都在 7.x 的 Powershell 内执行。\nVS Code\nGo\nGo 安装说明见官网: Go 安装指南\nGithub 账户\nchoco\n参考官网 choco 安装指南 安装 choco，执行以下指令：\n1 Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) Hugo\n执行以下指令，利用 choco 安装 Hugo：\n1 choco install hugo-extended Dart Sass\n执行以下指令，利用 choco 安装 Sass：\n1 choco install sass 2. 利用 hugo 先在本地端搭建网页 在 Powershell 切换至文件夹 A，执行以下指令：\n1 2 # 通过 hugo 简历一个新的项目文件，主文件的格式采用yaml hugo new site demo --format yaml 执行完上面指令后，Hugo 会生成网站，网站根目录为 ./demo。\n注意：打开网站根目录 A/demo，会发现 Hugo 生成了很多文件，其中最重要的是配置文件 hugo.yaml。网站的配置文件，会略有区别。常见的配置文件有：\nhugo.yaml / hugo.toml config.yaml / config.toml 切换路径至网站根目录 A/demo，执行 git 初始化，为后续步骤做准备。\n1 git init 3. Hugo 配置 Theme 首先安装 Hugo 主题，所有的主题可以前往 Hugo themes 的官网进行下载 hugo themes 官网， 后面的所有才做都在 stack 主题下的介绍。 所有的主题都可使用，你可以选择自己喜欢的格式进行使用，本人选择 stack 主题的原因是该主题的作者提供了一个非常详细的使用文档，可前往下面的链接查看：stack 主题作者的详细说明文档。\n安装 Hugo 主题 papermod，执行以下指令：\n1 2 3 git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # 当我们要从 github 上拉取仓库时需要这个指令 git submodule update --remote --merge 执行上述指令后，主题 papermod 会存放在路径 A/demo/themes/papermod。\n配置主题 papermod 的配置文件 hugo.yaml 如下：\n1 echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml 执行完上面指令后，网站配置文件最后一行会添加以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 baseURL: https://yylustb.github.io/ languageCode: en-us title: My New Hugo Site theme: [\u0026#34;PaperMod\u0026#34;] paginate: 5 # 列表页显示文章数 # 默认支持首页 HTML 页面、RSS 订阅、JSON（搜索），可以满足大多数 Hugo 博客需求。 outputs: home: # 主页输出 - HTML - RSS - JSON markup: goldmark: # Hugo 默认使用的 Markdown 渲染引擎 renderer: unsafe: true # 控制是否允许在 Markdown 中渲染 “不安全（raw）” 的 HTML 标签 highlight: lineNos: true # 是否在代码高亮时显示行号 noClasses: false # 不要禁用 class codeFences: true # 启用 Markdown 代码块语法（```） style: \u0026#34;monokai\u0026#34; params: env: production title: ExampleSite # 站点的标题 description: \u0026#34;ExampleSite description\u0026#34; # 站点的描述信息 keywords: [Blog, Portfolio, PaperMod] # 站点的关键词，有助于 SEO author: Me # 站点的作者 images: [\u0026#34;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026#34;] # 用于社交分享时的默认封面图片 DateFormat: \u0026#34;January 2, 2006\u0026#34; # 文章日期的显示格式 defaultTheme: auto # dark, light # 站点默认主题模式（自动适应用户偏好） disableThemeToggle: false # 是否禁用深色/浅色模式切换 ShowReadingTime: true # 显示阅读时间 ShowShareButtons: true # 显示社交分享按钮 ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: false ShowWordCount: true ShowRssButtonInSectionTermList: true UseHugoToc: true comments: false hidemeta: false hideSummary: false showtoc: false tocopen: false menu: # 定义导航菜单 main: # Hugo 主题 PaperMod 默认的主菜单（可以有多个菜单） - identifier: categories name: categories url: /categories/ weight: 10 - identifier: tags name: tags url: /tags/ weight: 20 4. 添加网页内容 在路径 A/demo 下，执行以下指令：\n1 hugo new content posts/hello.md 执行完上面指令后，Hugo 会生成网页，保存路径为 A/demo/content/posts/hello.md。打开该文档，会看到以下内容：\n1 2 3 4 5 +++ date = \u0026#39;2025-02-11T07:14:09+08:00\u0026#39; draft = false title = \u0026#39;My First Post\u0026#39; +++ 5. Hugo 本地部署 如果 draft = true，执行以下指令（以下两个指令是一样的，只执行一个即可）：\n1 2 hugo server -D hugo server --buildDrafts 如果 draft = false，执行：\n1 hugo server 最后，可以在浏览器输入地址 http://localhost:1313/，即看到网页内容。\n6. Hugo 部署到 Github Pages 🚀 有个特别奇葩的bug，就是在当你的github.io建立好了之后你想打开看看是否生效的时候，换个浏览器，不要用IE，IE浏览器由于存在大量缓存，导致他一直产生的是缓存的数据，让我以为一直没弄好，卡在这会纯浪费很长时间。 6.1 新建 Github 仓库 step 1. 新建 Github 仓库，仓库名必须为 username.github.io，username 为 Github 用户名。\nstep 2. 将本地仓库推到 Github 仓库\n切换路径至 A/demo，执行以下指令：\n1 2 3 4 5 git remote add origin \u0026#34;Github 仓库 SSH 地址\u0026#34; # 不需要井号 git add . git commit -m \u0026#34;First Submit\u0026#34; git branch -M main git push -u origin main 刷新 Github 仓库，会看到 git 仓库已上传。\nstep 3. 这时 username.github.io 还是不能访问，接下来进行部署。\nstep 3.1 建立部署配置文件 回到本地仓库根目录，建立文件夹 .github/workflows，在该文件夹下新建文件 hugo.yaml。hugo.yaml的内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 name: Deploy Hugo site to Pages on: push: branches: - main workflow_dispatch: permissions: contents: read pages: write id-token: write concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false defaults: run: shell: bash jobs: build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.141.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Build with Hugo run: hugo --gc --minify --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 通过 Hugo 和 Github 实现网页的生成 下面提供了两种不同的方法来实现网页搭建，方法1是将你的全部源文件公开，方法2你可以完全不公开自己的底层文件，依旧能生成网站，需要公开的只有hugo搭建页面时自动生成的文件。选择哪种方案取决于你自己的需求，如果想不公开自己的底层文件，可直接跳转到方法2. step 3.2 选择 GitHub 部署方式 Github 项目页面 -\u0026gt; Settings -\u0026gt; Pages -\u0026gt; Build and deployment -\u0026gt; Source -\u0026gt; 改为 GitHub Actions。\nstep 3.3 查看 GitHub 部署结果 Github 项目页面 -\u0026gt; Action 页面会看到 GitHub 的部署情况。部署正确后即可看到 username.github.io 页面。\n1 2 这是一个详细的 Hugo 网站搭建及部署流程，涵盖了从环境配置到最终部署的每个步骤。 ","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/hugo-%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B1hugo--github-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/","title":"Hugo 搭建网站系列教程1：Hugo + Github 的配置方法"},{"content":"Hugo Markdown 格式介绍 在使用 Hugo 构建静态网站时，Markdown 文件是最常用的内容格式。本文将介绍如何在 Hugo 中使用 Markdown 格式，并涵盖常见的排版技巧和功能。\n目录 标题 段落和换行 列表 链接和图片 强调和粗体 代码块 引用 表格 自定义内容 标题 Markdown 使用 # 符号来定义标题，支持从一级标题到六级标题：\n1 2 3 4 5 6 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 这会渲染成：\n一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 段落和换行 段落之间通过空行来分隔，换行可以使用两个空格加回车：\n1 2 3 4 这是第一段内容。 这是第二段内容，后面紧跟着换行 这是新的一行。 列表 无序列表 无序列表使用星号 * 或者减号 - 来表示：\n1 2 3 4 - 项目一 - 项目二 - 子项目 1 - 子项目 2 有序列表 有序列表使用数字和句点来表示：\n1 2 3 1. 第一项 2. 第二项 3. 第三项 链接和图片 链接 创建链接的语法为 [链接文本](链接地址)：\n1 [GitHub](https://github.com) 图片 图片的语法与链接相似，但前面有一个感叹号 !：\n1 ![Hugo logo](https://gohugo.io/images/hugo-logo-wide.svg) 强调和粗体 强调 使用单个星号 * 或下划线 _ 来表示斜体（强调）：\n1 2 *斜体文本* _斜体文本_ 粗体 使用双星号 ** 或双下划线 __ 来表示粗体：\n1 2 **粗体文本** __粗体文本__ 同时使用强调和粗体 1 ***加粗和斜体*** 代码块 行内代码 行内代码使用反引号 ` 包围：\n1 这是 `代码` 示例。 块级代码 块级代码缩进四个空格：\n1 2 这是一个块级代码 也可以通过缩进来表示 引用 引用文本使用 \u0026gt; 符号：\n1 2 \u0026gt; 这是一个引用块。 \u0026gt; 你可以用它来引用他人的话。 表格 Markdown 支持简单的表格，使用管道符号 | 和减号 - 来构建：\n1 2 3 4 5 | 姓名 | 年龄 | 职业 | |--------|------|----------| | 张三 | 25 | 工程师 | | 李四 | 30 | 设计师 | | 王五 | 28 | 产品经理 | 这会渲染成：\n姓名 年龄 职业 张三 25 工程师 李四 30 设计师 王五 28 产品经理 ","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/hugo-%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2markdown-%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D/","title":"Hugo 搭建网站系列教程2：Markdown 格式介绍"},{"content":"","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/hugo-%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B3hugo--github-%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","title":"Hugo 搭建网站系列教程3：Hugo + Github 搭建网页时遇到的问题"},{"content":"下面是一份从零开始的完整示例，教你如何在 Hugo 中通过 MathJax 实现公式的自动编号和引用。之所以不用 KaTeX，是因为 KaTeX 默认没有“自动给所有行间公式编号”的功能；若要自动编号并且想用 \\label、\\ref 来引用，MathJax 更合适。\n以下操作基于你已经装好 Hugo 并且在使用常见主题（比如我使用的就是 hugo-theme-stack）进行网站构建为前提。\n第 1 步：禁用或移除主题自带的 KaTeX 大多数 Hugo 主题（例如 hugo-theme-stack）会在检测到 params.article.math = true 或在文章 Front Matter 里写了 math: true 时自动加载 KaTeX。为了让我们接下来放置的 MathJax 生效，需要先禁用这个自动加载。\n如果你之前在 config.yaml（或 config.toml 等）里写了：\n1 2 3 params: article: math: true # 默认启用 KaTeX 请改成 false 或者干脆去掉这一行。例如：\n1 2 3 params: article: math: false 或者删除这行，这样主题就不会再自动插入 KaTeX 相关脚本。\n如果你的主题没有任何 KaTeX 配置，可直接略过本步。\n第 2 步：创建一个自定义的部分模板，放入 MathJax 脚本 假设你想让 MathJax 在每个页面全局生效，你可以在 Hugo 站点根目录下（不是主题目录）的 layouts/partials/ 文件夹里新建一个文件，如 mathjax-support.html，其内容类似下面：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;!-- layouts/partials/mathjax-support.html 说明： 1. window.MathJax = {...} 是 MathJax 3.x 的配置方式 2. tags: \u0026#39;ams\u0026#39; 代表使用 AMS 环境自动给行间公式编号 3. inlineMath 和 displayMath 里定义了行内、块级公式的分隔符 4. tex-chtml.js 是 MathJax 3.x 推荐的打包文件 --\u0026gt; \u0026lt;script\u0026gt; window.MathJax = { tex: { tags: \u0026#39;ams\u0026#39;, // 启用自动编号 (AMS 环境) inlineMath: [[\u0026#39;$\u0026#39;, \u0026#39;$\u0026#39;], [\u0026#39;\\\\(\u0026#39;, \u0026#39;\\\\)\u0026#39;]], displayMath: [[\u0026#39;$$\u0026#39;,\u0026#39;$$\u0026#39;], [\u0026#39;\\\\[\u0026#39;,\u0026#39;\\\\]\u0026#39;]], // 允许使用 \\label{eq1} / \\ref{eq1} / \\eqref{eq1} 来引用公式 }, options: { // 可根据需求，决定是否让 MathJax 遇到报错时仍然渲染其他部分 // 或是否启用 menuOptions: {...} } }; \u0026lt;/script\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; tags: \u0026lsquo;ams\u0026rsquo; 让所有用 \\begin{equation}...\\end{equation} 包裹的块级公式自动产生连续编号。 默认行内公式仍使用 $...$，块级公式使用 $$...$$。如果你想强制都用 \\(...\\) 和 \\[...\\]，只要修改 inlineMath 与 displayMath 里分隔符即可。 第 3 步：在 \u0026lt;head\u0026gt; 中引入这个部分模板 你需要把 mathjax-support.html 放到网页 \u0026lt;head\u0026gt; 里，让浏览器加载它。以 hugo-theme-stack 为例，你可以这样做：\n在站点根目录下（或主题支持的 override 目录）找到/创建 layouts/partials/head.html。 在你希望插入 MathJax 的地方，添加： 1 {{ partial \u0026#34;mathjax-support.html\u0026#34; . }} 大多数主题在 head.html 里会有一些公共的 \u0026lt;meta\u0026gt;、CSS 引用等内容，你只需要在适当的地方插入上面那行 partial 即可，示例如下：\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ .Lang }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; ... {{ partial \u0026#34;mathjax-support.html\u0026#34; . }} \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; ... \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 这样，每次渲染页面时，都会自动注入我们第 2 步写的 MathJax 配置和脚本。\n第 4 步：编写带编号和引用的公式 完成以上三步后，你就可以在 Hugo 的 Markdown 文件中写出 LaTeX 环境来获得自动编号。通常推荐用 equation 环境，并配合 \\label / \\ref / \\eqref 等。\n4.1 自动编号 示例一：一个简单的自动编号方程\n1 2 3 \\begin{equation} E = mc^2 \\end{equation} 编译后会自动给这行方程打上一个编号，比如 “(1)”。后面写的会自动递增编号。\n4.2 手动引用 如果想在文章中其他地方引用这个公式，可以给它加个 \\label 标记：\n1 2 3 4 \\begin{equation} E = mc^2 \\label{eq:energy} \\end{equation} 然后在文字里写：\n1 我们可以看到公式 (\\ref{eq:energy}) 给出了质量和能量之间的关系。 MathJax 会把 (\\ref{eq:energy}) 渲染成对应公式编号，比如 “(1)”，并且会在公式处加相应的内部跳转（如果主题或浏览器支持的话）。\n也可以用 \\eqref{eq:energy} 的方式引用，它会直接带上括号并形成链接。\n补充：如何修改 文件 找到 layouts/partials/head/head.html\n进入你的 Hugo 项目目录： 1 themes/hugo-theme-stack/layouts/partials/head/ 找到 head.html 文件。 复制到你的站点目录\n复制 themes/hugo-theme-stack/layouts/partials/head/head.html 到 Hugo 站点根目录下的 layouts/partials/head/ 目录： 1 2 mkdir -p layouts/partials/head cp themes/hugo-theme-stack/layouts/partials/head/head.html layouts/partials/head/head.html 编辑 layouts/partials/head/head.html\n打开 layouts/partials/head/head.html，在 \u0026lt;/head\u0026gt; 之前插入： 1 {{ partial \u0026#34;mathjax-support.html\u0026#34; . }} 示例修改后的 head.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ .Site.LanguageCode }}\u0026#34; dir=\u0026#34;{{ default `ltr` .Language.LanguageDirection }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; {{ partial \u0026#34;head/meta.html\u0026#34; . }} {{ partial \u0026#34;head/styles.html\u0026#34; . }} {{ partial \u0026#34;head/scripts.html\u0026#34; . }} \u0026lt;!-- 这里插入 MathJax 脚本 --\u0026gt; {{ partial \u0026#34;mathjax-support.html\u0026#34; . }} \u0026lt;/head\u0026gt; ","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/hugo-%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B4%E5%A6%82%E4%BD%95%E5%9C%A8hugo%E4%B8%8B%E5%AE%9E%E7%8E%B0%E5%85%AC%E5%BC%8F%E8%87%AA%E5%8A%A8%E7%BC%96%E5%8F%B7%E5%92%8C%E5%BC%95%E7%94%A8/","title":"Hugo 搭建网站系列教程4：如何在hugo下实现公式自动编号和引用"},{"content":"安装 Ubuntu 的方法 注：下载不同版本要依赖于你想要做的东西，例如最新版的 Ubuntu 已经不支持 ROS1 的使用了，所以如果你想要研究 ROS1 就必须安装对应的版本。\n下载 Ubuntu 的映像文件 首先到 Ubuntu 的官网（）下载你想要安装的版本。\n","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/%E5%AE%89%E8%A3%85ubuntu%E7%9A%84%E5%85%A8%E6%B5%81%E7%A8%8B%E5%8F%8A%E5%AE%89%E8%A3%85%E4%BC%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","title":"安装Ubuntu的全流程及安装会遇到的问题"},{"content":"","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B1%E5%A6%82%E4%BD%95%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E8%83%BD%E7%94%A8%E4%BD%9C%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%9A%84env/","title":"强化学习系列教程1：如何自己编写一个能用作强化学习的ENV"},{"content":"","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2dqn%E7%AE%97%E6%B3%95%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/","title":"强化学习系列教程2：DQN算法的代码实现"}]