[{"content":"配置Hugo 注：有个特别奇葩的bug，就是在当你的github.io建立好了之后你想打开看看是否生效的时候，换个浏览器，不要用IE，IE浏览器由于存在大量缓存，导致他一直产生的是缓存的数据，让我以为一直没弄好，卡在这会纯浪费很长时间。\n","date":"2025-02-26T10:15:50+08:00","permalink":"https://LiuGuilongustb.github.io/p/hugo--github-%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B9%E6%B3%95%E5%8F%8A%E9%97%AE%E9%A2%98/","title":"Hugo + Github 配置个人博客的方法及问题"},{"content":"安装 Ubuntu 的方法 下载 Ubuntu 的映像文件 首先到 Ubuntu 的官网（）下载你想要安装的版本。 注：下载不同版本要依赖于你想要做的东西，例如最新版的 Ubuntu 已经不支持 ROS1 的使用了，所以如果你想要研究 ROS1 就必须安装对应的版本。\n","date":"2025-02-26T10:15:50+08:00","permalink":"https://LiuGuilongustb.github.io/p/%E5%AE%89%E8%A3%85ubuntu%E7%9A%84%E5%85%A8%E6%B5%81%E7%A8%8B%E5%8F%8A%E5%AE%89%E8%A3%85%E4%BC%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","title":"安装Ubuntu的全流程及安装会遇到的问题"},{"content":"Hugo Markdown 格式介绍 在使用 Hugo 构建静态网站时，Markdown 文件是最常用的内容格式。本文将介绍如何在 Hugo 中使用 Markdown 格式，并涵盖常见的排版技巧和功能。\n目录 标题 段落和换行 列表 链接和图片 强调和粗体 代码块 引用 表格 自定义内容 标题 Markdown 使用 # 符号来定义标题，支持从一级标题到六级标题：\n1 2 3 4 5 6 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 这会渲染成：\n一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 段落和换行 段落之间通过空行来分隔，换行可以使用两个空格加回车：\n1 2 3 4 这是第一段内容。 这是第二段内容，后面紧跟着换行 这是新的一行。 列表 无序列表 无序列表使用星号 * 或者减号 - 来表示：\n1 2 3 4 - 项目一 - 项目二 - 子项目 1 - 子项目 2 有序列表 有序列表使用数字和句点来表示：\n1 2 3 1. 第一项 2. 第二项 3. 第三项 链接和图片 链接 创建链接的语法为 [链接文本](链接地址)：\n1 [GitHub](https://github.com) 图片 图片的语法与链接相似，但前面有一个感叹号 !：\n1 ![Hugo logo](https://gohugo.io/images/hugo-logo-wide.svg) 强调和粗体 强调 使用单个星号 * 或下划线 _ 来表示斜体（强调）：\n1 2 *斜体文本* _斜体文本_ 粗体 使用双星号 ** 或双下划线 __ 来表示粗体：\n1 2 **粗体文本** __粗体文本__ 同时使用强调和粗体 1 ***加粗和斜体*** 代码块 行内代码 行内代码使用反引号 ` 包围：\n1 这是 `代码` 示例。 块级代码 块级代码使用三个反引号 ``` 或者缩进四个空格：\n这是一个块级代码块 可以包含多行代码\n或者：\n1 2 这是一个块级代码 也可以通过缩进来表示 引用 引用文本使用 \u0026gt; 符号：\n1 2 \u0026gt; 这是一个引用块。 \u0026gt; 你可以用它来引用他人的话。 表格 Markdown 支持简单的表格，使用管道符号 | 和减号 - 来构建：\n1 2 3 4 5 | 姓名 | 年龄 | 职业 | |--------|------|----------| | 张三 | 25 | 工程师 | | 李四 | 30 | 设计师 | | 王五 | 28 | 产品经理 | 这会渲染成：\n姓名 年龄 职业 张三 25 工程师 李四 30 设计师 王五 28 产品经理 自定义内容 分隔线 你可以使用三个或更多的星号 *、减号 - 或下划线 _ 来创建分隔线：\n1 2 3 4 --- 这是分隔线上方的内容 --- 这是分隔线下方的内容 引用样式 在 Hugo 中，你还可以使用自定义的 shortcodes 或 layout 来定制页面的显示。通过 content 文件夹中的 shortcodes 文件，可以嵌入动态内容或外部资源。\n调用 Shortcodes 例如，如果你要添加一个 YouTube 视频，可以通过以下方式使用 shortcode：\n1 Hugo 会自动渲染并嵌入你指定的视频。\n更多 Hugo 特性和配置 Front Matter 在 Hugo 中，每个页面都有一个所谓的 Front Matter 部分。它是页面的元数据，通常位于页面内容的顶部，用于定义页面的标题、日期、标签等。\n1 2 3 4 5 6 7 8 9 10 --- title: \u0026#34;关于 Hugo 的介绍\u0026#34; date: 2025-02-26 author: \u0026#34;你的名字\u0026#34; tags: - Hugo - 静态网站 - Markdown description: \u0026#34;介绍 Hugo 的基本配置和特性\u0026#34; --- Front Matter 使用 YAML 格式来描述页面的元数据，可以设置页面的标题、日期、作者、标签等。Hugo 会根据这些数据来生成相应的页面。\n链接到其他页面 如果你想在页面中链接到其他页面，可以直接使用相对路径。例如：\n1 [去首页](../index.md) Hugo 会根据站点的结构自动处理相对路径。\n自定义短代码 Hugo 支持自定义 shortcodes，这使得你可以嵌入 HTML、JavaScript 或其他动态内容。比如，在页面中嵌入视频或自定义 HTML 代码：\n1 1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } 你可以在 layouts/shortcodes 文件夹中创建自定义的短代码模板，以扩展站点的功能。\n代码高亮 Hugo 支持代码高亮功能，可以使用以下格式显示高亮代码块：\n1 2 3 4 5 6 7 8 ```go package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } 1 2 3 4 5 6 7 8 9 10 11 这会在页面中显示高亮的 Go 代码，Hugo 使用默认的代码高亮样式进行渲染，或者你可以自定义样式。 ### 文章列表 你可以在首页或其他页面展示文章列表。Hugo 提供了内置的分页功能来实现这一点： ```markdown {{ range .Pages }} * [{{ .Title }}]({{ .Permalink }}) {{ end }} 这段代码会列出当前页面下的所有文章，并为每篇文章生成一个链接。\n显示最新的文章 你可以通过 Hugo 内建的 recent 函数来显示最新的文章。例如，在首页中显示最近的 5 篇文章：\n1 2 3 {{ range first 5 .Site.RegularPages }} * [{{ .Title }}]({{ .Permalink }}) {{ end }} 自定义页面布局 Hugo 提供了灵活的布局和模板系统，可以根据不同的需求定制页面布局。在 layouts 文件夹中，你可以创建不同类型的布局文件，比如 single.html、list.html 和 index.html，分别用于单页面、列表页面和首页。\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!-- layouts/_default/single.html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ .Content }}\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 自定义内容类型 在 Hugo 中，你可以创建自定义的内容类型，例如：\n1 2 3 --- type: \u0026#34;blog\u0026#34; --- 这种方式可以让你为站点创建不同的内容类型（例如博客、项目、新闻等），并为每种类型定义不同的模板。\nHugo 配置文件 Hugo 的配置文件通常是 config.toml、config.yaml 或 config.json，它定义了站点的基本信息和配置参数。以下是一个 config.toml 的示例：\n1 2 3 4 5 6 7 8 baseURL = \u0026#34;https://example.com/\u0026#34; title = \u0026#34;我的 Hugo 网站\u0026#34; languageCode = \u0026#34;zh-cn\u0026#34; theme = \u0026#34;mytheme\u0026#34; [params] description = \u0026#34;这是我的 Hugo 网站\u0026#34; author = \u0026#34;你的名字\u0026#34; 该配置文件中设置了站点的基础 URL、标题、语言和主题等信息。你还可以根据需要设置更多的参数。\nHugo 部署到 GitHub Pages 在使用 GitHub Pages 部署 Hugo 网站时，你需要在 config.toml 文件中设置正确的 baseURL，并使用 GitHub Actions 或其他工具进行自动部署。例如，配置 baseURL：\n1 baseURL = \u0026#34;https://yourusername.github.io/\u0026#34; 此外，你还需要确保生成的文件（通常是 public 文件夹）被推送到 GitHub 仓库中的 gh-pages 分支。你可以通过 GitHub Actions 配置自动部署流程。\n","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/hugo-markdown-%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D/","title":"Hugo Markdown 格式介绍"}]