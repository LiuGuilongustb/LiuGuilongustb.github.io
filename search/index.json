[{"content":"配置Hugo 1. 安装必要软件 按照以下顺序安装软件（因为相互依赖关系）：\nGit\nPowershell 7.x\nWin11 自带 Powershell 的版本是 5.1，需要更新到 7.x。首先，在 win11 自带 Powershell 里输入以下指令，安装最新稳定版：\n1 winget install --id Microsoft.Powershell --source winget 接下来的命令行操作都在 7.x 的 Powershell 内执行。\nVS Code\nGo\nGo 安装说明见官网: Go 安装指南\nGithub 账户\nchoco\n参考官网 choco 安装指南 安装 choco，执行以下指令：\n1 Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) Hugo\n执行以下指令，利用 choco 安装 Hugo：\n1 choco install hugo-extended Dart Sass\n执行以下指令，利用 choco 安装 Sass：\n1 choco install sass 2. 利用 hugo 先在本地端搭建网页 在 Powershell 切换至文件夹 A，执行以下指令：\n1 2 # 通过 hugo 简历一个新的项目文件，主文件的格式采用yaml hugo new site demo --format yaml 执行完上面指令后，Hugo 会生成网站，网站根目录为 ./demo。\n注意：打开网站根目录 A/demo，会发现 Hugo 生成了很多文件，其中最重要的是配置文件 hugo.yaml。网站的配置文件，会略有区别。常见的配置文件有：\nhugo.yaml / hugo.toml config.yaml / config.toml 切换路径至网站根目录 A/demo，执行 git 初始化，为后续步骤做准备。\n1 git init 3. Hugo 配置 Theme 首先安装 Hugo 主题，所有的主题可以前往 Hugo themes 的官网进行下载 hugo themes 官网， 后面的所有才做都在 stack 主题下的介绍。 所有的主题都可使用，你可以选择自己喜欢的格式进行使用，本人选择 stack 主题的原因是该主题的作者提供了一个非常详细的使用文档，可前往下面的链接查看：stack 主题作者的详细说明文档。\n安装 Hugo 主题 papermod，执行以下指令：\n1 2 3 git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # 当我们要从 github 上拉取仓库时需要这个指令 git submodule update --remote --merge 执行上述指令后，主题 papermod 会存放在路径 A/demo/themes/papermod。\n配置主题 papermod 的配置文件 hugo.yaml 如下：\n1 echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml 执行完上面指令后，网站配置文件最后一行会添加以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 baseURL: https://yylustb.github.io/ languageCode: en-us title: My New Hugo Site theme: [\u0026#34;PaperMod\u0026#34;] paginate: 5 # 列表页显示文章数 # 默认支持首页 HTML 页面、RSS 订阅、JSON（搜索），可以满足大多数 Hugo 博客需求。 outputs: home: # 主页输出 - HTML - RSS - JSON markup: goldmark: # Hugo 默认使用的 Markdown 渲染引擎 renderer: unsafe: true # 控制是否允许在 Markdown 中渲染 “不安全（raw）” 的 HTML 标签 highlight: lineNos: true # 是否在代码高亮时显示行号 noClasses: false # 不要禁用 class codeFences: true # 启用 Markdown 代码块语法（```） style: \u0026#34;monokai\u0026#34; params: env: production title: ExampleSite # 站点的标题 description: \u0026#34;ExampleSite description\u0026#34; # 站点的描述信息 keywords: [Blog, Portfolio, PaperMod] # 站点的关键词，有助于 SEO author: Me # 站点的作者 images: [\u0026#34;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026#34;] # 用于社交分享时的默认封面图片 DateFormat: \u0026#34;January 2, 2006\u0026#34; # 文章日期的显示格式 defaultTheme: auto # dark, light # 站点默认主题模式（自动适应用户偏好） disableThemeToggle: false # 是否禁用深色/浅色模式切换 ShowReadingTime: true # 显示阅读时间 ShowShareButtons: true # 显示社交分享按钮 ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: false ShowWordCount: true ShowRssButtonInSectionTermList: true UseHugoToc: true comments: false hidemeta: false hideSummary: false showtoc: false tocopen: false menu: # 定义导航菜单 main: # Hugo 主题 PaperMod 默认的主菜单（可以有多个菜单） - identifier: categories name: categories url: /categories/ weight: 10 - identifier: tags name: tags url: /tags/ weight: 20 4. 添加网页内容 在路径 A/demo 下，执行以下指令：\n1 hugo new content posts/hello.md 执行完上面指令后，Hugo 会生成网页，保存路径为 A/demo/content/posts/hello.md。打开该文档，会看到以下内容：\n1 2 3 4 5 +++ date = \u0026#39;2025-02-11T07:14:09+08:00\u0026#39; draft = false title = \u0026#39;My First Post\u0026#39; +++ 5. Hugo 本地部署 如果 draft = true，执行以下指令（以下两个指令是一样的，只执行一个即可）：\n1 2 hugo server -D hugo server --buildDrafts 如果 draft = false，执行：\n1 hugo server 最后，可以在浏览器输入地址 http://localhost:1313/，即看到网页内容。\n6. Hugo 部署到 Github Pages 🚀 有个特别奇葩的bug，就是在当你的github.io建立好了之后你想打开看看是否生效的时候，换个浏览器，不要用IE，IE浏览器由于存在大量缓存，导致他一直产生的是缓存的数据，让我以为一直没弄好，卡在这会纯浪费很长时间。 6.1 新建 Github 仓库 step 1. 新建 Github 仓库，仓库名必须为 username.github.io，username 为 Github 用户名。\nstep 2. 将本地仓库推到 Github 仓库\n切换路径至 A/demo，执行以下指令：\n1 2 3 4 5 git remote add origin \u0026#34;Github 仓库 SSH 地址\u0026#34; # 不需要井号 git add . git commit -m \u0026#34;First Submit\u0026#34; git branch -M main git push -u origin main 刷新 Github 仓库，会看到 git 仓库已上传。\nstep 3. 这时 username.github.io 还是不能访问，接下来进行部署。\nstep 3.1 建立部署配置文件 回到本地仓库根目录，建立文件夹 .github/workflows，在该文件夹下新建文件 hugo.yaml。hugo.yaml的内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 name: Deploy Hugo site to Pages on: push: branches: - main workflow_dispatch: permissions: contents: read pages: write id-token: write concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false defaults: run: shell: bash jobs: build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.141.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Build with Hugo run: hugo --gc --minify --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 通过 Hugo 和 Github 实现网页的生成 下面提供了两种不同的方法来实现网页搭建，方法1是将你的全部源文件公开，方法2你可以完全不公开自己的底层文件，依旧能生成网站，需要公开的只有hugo搭建页面时自动生成的文件。选择哪种方案取决于你自己的需求，如果想不公开自己的底层文件，可直接跳转到方法2. step 3.2 选择 GitHub 部署方式 Github 项目页面 -\u0026gt; Settings -\u0026gt; Pages -\u0026gt; Build and deployment -\u0026gt; Source -\u0026gt; 改为 GitHub Actions。\nstep 3.3 查看 GitHub 部署结果 Github 项目页面 -\u0026gt; Action 页面会看到 GitHub 的部署情况。部署正确后即可看到 username.github.io 页面。\n1 2 这是一个详细的 Hugo 网站搭建及部署流程，涵盖了从环境配置到最终部署的每个步骤。 ","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/hugo-%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B1hugo--github-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/","title":"Hugo 搭建网站系列教程1：Hugo + Github 的配置方法"},{"content":"Hugo Markdown 格式介绍 在使用 Hugo 构建静态网站时，Markdown 文件是最常用的内容格式。本文将介绍如何在 Hugo 中使用 Markdown 格式，并涵盖常见的排版技巧和功能。\n目录 标题 段落和换行 列表 链接和图片 强调和粗体 代码块 引用 表格 自定义内容 标题 Markdown 使用 # 符号来定义标题，支持从一级标题到六级标题：\n1 2 3 4 5 6 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 这会渲染成：\n一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 段落和换行 段落之间通过空行来分隔，换行可以使用两个空格加回车：\n1 2 3 4 这是第一段内容。 这是第二段内容，后面紧跟着换行 这是新的一行。 列表 无序列表 无序列表使用星号 * 或者减号 - 来表示：\n1 2 3 4 - 项目一 - 项目二 - 子项目 1 - 子项目 2 有序列表 有序列表使用数字和句点来表示：\n1 2 3 1. 第一项 2. 第二项 3. 第三项 链接和图片 链接 创建链接的语法为 [链接文本](链接地址)：\n1 [GitHub](https://github.com) 图片 图片的语法与链接相似，但前面有一个感叹号 !：\n1 ![Hugo logo](https://gohugo.io/images/hugo-logo-wide.svg) 强调和粗体 强调 使用单个星号 * 或下划线 _ 来表示斜体（强调）：\n1 2 *斜体文本* _斜体文本_ 粗体 使用双星号 ** 或双下划线 __ 来表示粗体：\n1 2 **粗体文本** __粗体文本__ 同时使用强调和粗体 1 ***加粗和斜体*** 代码块 行内代码 行内代码使用反引号 ` 包围：\n1 这是 `代码` 示例。 块级代码 块级代码缩进四个空格：\n1 2 这是一个块级代码 也可以通过缩进来表示 引用 引用文本使用 \u0026gt; 符号：\n1 2 \u0026gt; 这是一个引用块。 \u0026gt; 你可以用它来引用他人的话。 表格 Markdown 支持简单的表格，使用管道符号 | 和减号 - 来构建：\n1 2 3 4 5 | 姓名 | 年龄 | 职业 | |--------|------|----------| | 张三 | 25 | 工程师 | | 李四 | 30 | 设计师 | | 王五 | 28 | 产品经理 | 这会渲染成：\n姓名 年龄 职业 张三 25 工程师 李四 30 设计师 王五 28 产品经理 ","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/hugo-%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2markdown-%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D/","title":"Hugo 搭建网站系列教程2：Markdown 格式介绍"},{"content":"","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/hugo-%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B3hugo--github-%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","title":"Hugo 搭建网站系列教程3：Hugo + Github 搭建网页时遇到的问题"},{"content":"安装 Ubuntu 的方法 注：下载不同版本要依赖于你想要做的东西，例如最新版的 Ubuntu 已经不支持 ROS1 的使用了，所以如果你想要研究 ROS1 就必须安装对应的版本。\n下载 Ubuntu 的映像文件 首先到 Ubuntu 的官网（）下载你想要安装的版本。\n","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/%E5%AE%89%E8%A3%85ubuntu%E7%9A%84%E5%85%A8%E6%B5%81%E7%A8%8B%E5%8F%8A%E5%AE%89%E8%A3%85%E4%BC%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","title":"安装Ubuntu的全流程及安装会遇到的问题"},{"content":"","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B1%E5%A6%82%E4%BD%95%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E8%83%BD%E7%94%A8%E4%BD%9C%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%9A%84env/","title":"强化学习系列教程1：如何自己编写一个能用作强化学习的ENV"},{"content":"","date":"2025-02-26T00:00:00Z","permalink":"https://LiuGuilongustb.github.io/p/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2dqn%E7%AE%97%E6%B3%95%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/","title":"强化学习系列教程2：DQN算法的代码实现"}]